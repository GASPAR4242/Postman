{
	"info": {
		"_postman_id": "adec75e1-171c-49cf-956b-1b5306edd8f1",
		"name": "group_22_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alexey",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "1new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let jsonData = pm.response.json();\r",
							"    let salary = jsonData.salary[0];\r",
							"    let salary_2 = +jsonData.salary[1];\r",
							"    let salary_3 = +jsonData.salary[2];\r",
							"\r",
							"    console.log(\"salary = \" + salary + \" \"  + typeof salary);\r",
							"    console.log(\"salary_2 = \" + salary_2 + \" \" +typeof salary_2);\r",
							"    console.log(\"salary_3 = \" + salary_3 + \" \" +typeof salary_3);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"check_salary\", function () {\r",
							"\r",
							"    pm.expect(salary).to.eql(+request.data.salary);\r",
							"\r",
							"});\r",
							"pm.test(\"check_salary2\", function () {\r",
							"\r",
							"    pm.expect(salary_2).to.eql(request.data.salary*2);\r",
							"    });\r",
							"\r",
							"pm.test(\"check_salary3\", function () {\r",
							"pm.expect(salary_3).to.eql(request.data.salary*3);\r",
							"    });\r",
							"\r",
							"    pm.test(\"salary3 > salary2 && salary3 > salary\", function () {\r",
							"        let a = salary_3 > salary_2 && salary_3>salary;\r",
							"        console.log(a)\r",
							"pm.expect(a).to.eql(true);\r",
							"\r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "name ",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info(RAW JSON)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    let jsonData = pm.response.json();\r",
							"    let salary = jsonData.person.u_name[1];\r",
							"    let u_salary_1_5_year = jsonData.person.u_salary_1_5_year;\r",
							"    let qa_salary_after_12_months = jsonData.qa_salary_after_12_months;\r",
							"    let qa_salary_after_6_months = jsonData.qa_salary_after_6_months;\r",
							"    let start_qa_salary = jsonData.start_qa_salary;\r",
							"    console.log(u_salary_1_5_year);\r",
							"\r",
							"\r",
							"pm.test(\"18 month\", function () {\r",
							"\r",
							"    pm.expect(u_salary_1_5_year).to.eql(start_qa_salary*4);\r",
							"});\r",
							"pm.test(\"12 month\", function () {\r",
							"\r",
							"    pm.expect(qa_salary_after_12_months).to.eql(start_qa_salary*2.9);\r",
							"});\r",
							"pm.test(\"6 month\", function () {\r",
							"\r",
							"    pm.expect(qa_salary_after_6_months).to.eql(start_qa_salary*2);\r",
							"});\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": \"32\",\r\n\"salary\": \"1500\",\r\n\"name\": \"Vladimir\",\r\n\"auth_token\": \"{{token}}\"\r\n\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"\r",
							" pm.environment.set(\"name_get_test_user\", jsonData.name);\r",
							"    let name1 = pm.environment.get(\"name_get_test_user\")\r",
							"    pm.test(\"Your test name\", function () {\r",
							"\r",
							"    pm.expect(request.data.name).to.eql(name1);\r",
							"});\r",
							"\r",
							"\r",
							"    pm.test(\"check age\", function () {\r",
							"\r",
							"    pm.expect(request.data.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name 2 example\", function () {\r",
							"pm.expect(request.data.name == name1).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "44",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Svyatoslav",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					],
					"query": [
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"weight_dayliFood\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(request.data.weight*0.012);\r",
							"\r",
							"});\r",
							"let a = request.data.auth_token;\r",
							"console.log(a)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "10",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "6",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Murzik",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"let a = Math.floor(Math.random() * 304);  // есть вариант поставить вместо 304 => jsonData.length но там 303 получится\r",
							"let Cur_ID = jsonData[a].Cur_ID\r",
							"console.log(Cur_ID)\r",
							"\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", jsonData[a].Cur_ID )"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"  var jsonData = pm.response.json();\r",
							"let a = jsonData\r",
							"console.log(a)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}